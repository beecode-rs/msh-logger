import { typeUtil } from '@beecode/msh-util/type-util';
import { LogLevel } from '#src/log-level';
import { ConsoleLogStrategySimple } from '#src/logger-strategy/console/log-strategy/simple';
export class LoggerStrategyConsole {
    _logLevel;
    _consoleLogStrategy;
    _messagePrefix;
    _meta;
    constructor(params) {
        const { logLevel = LogLevel.ERROR, consoleLogStrategy = new ConsoleLogStrategySimple(), messagePrefix, meta } = params ?? {};
        this._logLevel = logLevel;
        this._consoleLogStrategy = consoleLogStrategy;
        this._messagePrefix = messagePrefix;
        this._meta = meta;
    }
    clone(params) {
        const { meta, messagePrefix, logLevel } = params ?? {};
        return new LoggerStrategyConsole({
            logLevel: logLevel ?? this._logLevel,
            messagePrefix: messagePrefix ?? this._messagePrefix,
            // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
            meta: (this._meta || meta) && { ...this._meta, ...meta },
        });
    }
    static LogLevelToInt(logLevel) {
        switch (logLevel) {
            case LogLevel.ERROR:
                return 0;
            case LogLevel.WARN:
                return 1;
            case LogLevel.INFO:
                return 2;
            case LogLevel.DEBUG:
                return 3;
            default:
                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                throw typeUtil.exhaustiveError(`Unknown log lever [${logLevel}]`, logLevel);
        }
    }
    _shouldLog(currentLevel) {
        return LoggerStrategyConsole.LogLevelToInt(this._logLevel) >= LoggerStrategyConsole.LogLevelToInt(currentLevel);
    }
    _logMessage(type, ...msgs) {
        if (!this._shouldLog(type)) {
            return;
        }
        this._consoleLogStrategy.log({ meta: this._meta, prefix: this._messagePrefix, type }, ...msgs);
    }
    debug(...msgs) {
        this._logMessage(LogLevel.DEBUG, ...msgs);
    }
    info(...msgs) {
        this._logMessage(LogLevel.INFO, ...msgs);
    }
    warn(...msgs) {
        this._logMessage(LogLevel.WARN, ...msgs);
    }
    error(...msgs) {
        this._logMessage(LogLevel.ERROR, ...msgs);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc29sZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXItc3RyYXRlZ3kvY29uc29sZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFFdEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBR3pDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFBO0FBTTNGLE1BQU0sT0FBTyxxQkFBcUI7SUFDZCxTQUFTLENBQVU7SUFDbkIsbUJBQW1CLENBQW9CO0lBQ3ZDLGNBQWMsQ0FBUztJQUN2QixLQUFLLENBQWE7SUFFckMsWUFBWSxNQUE0QjtRQUN2QyxNQUFNLEVBQUUsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFBO1FBRTVILElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQTtRQUM3QyxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQTtRQUNuQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtJQUNsQixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQTZCO1FBQ2xDLE1BQU0sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUE7UUFFdEQsT0FBTyxJQUFJLHFCQUFxQixDQUFDO1lBQ2hDLFFBQVEsRUFBRSxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDcEMsYUFBYSxFQUFFLGFBQWEsSUFBSSxJQUFJLENBQUMsY0FBYztZQUNuRCx3RUFBd0U7WUFDeEUsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksRUFBRTtTQUN4RCxDQUFDLENBQUE7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFrQjtRQUN0QyxRQUFRLFFBQVEsRUFBRSxDQUFDO1lBQ2xCLEtBQUssUUFBUSxDQUFDLEtBQUs7Z0JBQ2xCLE9BQU8sQ0FBQyxDQUFBO1lBQ1QsS0FBSyxRQUFRLENBQUMsSUFBSTtnQkFDakIsT0FBTyxDQUFDLENBQUE7WUFDVCxLQUFLLFFBQVEsQ0FBQyxJQUFJO2dCQUNqQixPQUFPLENBQUMsQ0FBQTtZQUNULEtBQUssUUFBUSxDQUFDLEtBQUs7Z0JBQ2xCLE9BQU8sQ0FBQyxDQUFBO1lBQ1Q7Z0JBQ0MsNEVBQTRFO2dCQUM1RSxNQUFNLFFBQVEsQ0FBQyxlQUFlLENBQUMsc0JBQXNCLFFBQVEsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQzdFLENBQUM7SUFDRixDQUFDO0lBRVMsVUFBVSxDQUFDLFlBQXNCO1FBQzFDLE9BQU8scUJBQXFCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDaEgsQ0FBQztJQUVTLFdBQVcsQ0FBQyxJQUFjLEVBQUUsR0FBRyxJQUFlO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDNUIsT0FBTTtRQUNQLENBQUM7UUFDRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUMvRixDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQUcsSUFBZTtRQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0lBRUQsSUFBSSxDQUFDLEdBQUcsSUFBZTtRQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0lBRUQsSUFBSSxDQUFDLEdBQUcsSUFBZTtRQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQUcsSUFBZTtRQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlVXRpbCB9IGZyb20gJ0BiZWVjb2RlL21zaC11dGlsL3R5cGUtdXRpbCdcblxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICcjc3JjL2xvZy1sZXZlbCdcbmltcG9ydCB7IHR5cGUgTG9nZ2VyU3RyYXRlZ3ksIHR5cGUgTG9nZ2VyU3RyYXRlZ3lQYXJhbXMsIHR5cGUgT2JqZWN0VHlwZSB9IGZyb20gJyNzcmMvbG9nZ2VyLXN0cmF0ZWd5J1xuaW1wb3J0IHsgdHlwZSBDb25zb2xlTG9nU3RyYXRlZ3kgfSBmcm9tICcjc3JjL2xvZ2dlci1zdHJhdGVneS9jb25zb2xlL2xvZy1zdHJhdGVneSdcbmltcG9ydCB7IENvbnNvbGVMb2dTdHJhdGVneVNpbXBsZSB9IGZyb20gJyNzcmMvbG9nZ2VyLXN0cmF0ZWd5L2NvbnNvbGUvbG9nLXN0cmF0ZWd5L3NpbXBsZSdcblxuZXhwb3J0IHR5cGUgQ29uc29sZUxvZ2dlclBhcmFtcyA9IHtcblx0Y29uc29sZUxvZ1N0cmF0ZWd5PzogQ29uc29sZUxvZ1N0cmF0ZWd5XG59ICYgTG9nZ2VyU3RyYXRlZ3lQYXJhbXNcblxuZXhwb3J0IGNsYXNzIExvZ2dlclN0cmF0ZWd5Q29uc29sZSBpbXBsZW1lbnRzIExvZ2dlclN0cmF0ZWd5IHtcblx0cHJvdGVjdGVkIHJlYWRvbmx5IF9sb2dMZXZlbDogTG9nTGV2ZWxcblx0cHJvdGVjdGVkIHJlYWRvbmx5IF9jb25zb2xlTG9nU3RyYXRlZ3k6IENvbnNvbGVMb2dTdHJhdGVneVxuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX21lc3NhZ2VQcmVmaXg/OiBzdHJpbmdcblx0cHJvdGVjdGVkIHJlYWRvbmx5IF9tZXRhPzogT2JqZWN0VHlwZVxuXG5cdGNvbnN0cnVjdG9yKHBhcmFtcz86IENvbnNvbGVMb2dnZXJQYXJhbXMpIHtcblx0XHRjb25zdCB7IGxvZ0xldmVsID0gTG9nTGV2ZWwuRVJST1IsIGNvbnNvbGVMb2dTdHJhdGVneSA9IG5ldyBDb25zb2xlTG9nU3RyYXRlZ3lTaW1wbGUoKSwgbWVzc2FnZVByZWZpeCwgbWV0YSB9ID0gcGFyYW1zID8/IHt9XG5cblx0XHR0aGlzLl9sb2dMZXZlbCA9IGxvZ0xldmVsXG5cdFx0dGhpcy5fY29uc29sZUxvZ1N0cmF0ZWd5ID0gY29uc29sZUxvZ1N0cmF0ZWd5XG5cdFx0dGhpcy5fbWVzc2FnZVByZWZpeCA9IG1lc3NhZ2VQcmVmaXhcblx0XHR0aGlzLl9tZXRhID0gbWV0YVxuXHR9XG5cblx0Y2xvbmUocGFyYW1zPzogTG9nZ2VyU3RyYXRlZ3lQYXJhbXMpOiBMb2dnZXJTdHJhdGVneUNvbnNvbGUge1xuXHRcdGNvbnN0IHsgbWV0YSwgbWVzc2FnZVByZWZpeCwgbG9nTGV2ZWwgfSA9IHBhcmFtcyA/PyB7fVxuXG5cdFx0cmV0dXJuIG5ldyBMb2dnZXJTdHJhdGVneUNvbnNvbGUoe1xuXHRcdFx0bG9nTGV2ZWw6IGxvZ0xldmVsID8/IHRoaXMuX2xvZ0xldmVsLFxuXHRcdFx0bWVzc2FnZVByZWZpeDogbWVzc2FnZVByZWZpeCA/PyB0aGlzLl9tZXNzYWdlUHJlZml4LFxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItbnVsbGlzaC1jb2FsZXNjaW5nXG5cdFx0XHRtZXRhOiAodGhpcy5fbWV0YSB8fCBtZXRhKSAmJiB7IC4uLnRoaXMuX21ldGEsIC4uLm1ldGEgfSxcblx0XHR9KVxuXHR9XG5cblx0c3RhdGljIExvZ0xldmVsVG9JbnQobG9nTGV2ZWw6IExvZ0xldmVsKTogbnVtYmVyIHtcblx0XHRzd2l0Y2ggKGxvZ0xldmVsKSB7XG5cdFx0XHRjYXNlIExvZ0xldmVsLkVSUk9SOlxuXHRcdFx0XHRyZXR1cm4gMFxuXHRcdFx0Y2FzZSBMb2dMZXZlbC5XQVJOOlxuXHRcdFx0XHRyZXR1cm4gMVxuXHRcdFx0Y2FzZSBMb2dMZXZlbC5JTkZPOlxuXHRcdFx0XHRyZXR1cm4gMlxuXHRcdFx0Y2FzZSBMb2dMZXZlbC5ERUJVRzpcblx0XHRcdFx0cmV0dXJuIDNcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVzdHJpY3QtdGVtcGxhdGUtZXhwcmVzc2lvbnNcblx0XHRcdFx0dGhyb3cgdHlwZVV0aWwuZXhoYXVzdGl2ZUVycm9yKGBVbmtub3duIGxvZyBsZXZlciBbJHtsb2dMZXZlbH1dYCwgbG9nTGV2ZWwpXG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIF9zaG91bGRMb2coY3VycmVudExldmVsOiBMb2dMZXZlbCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBMb2dnZXJTdHJhdGVneUNvbnNvbGUuTG9nTGV2ZWxUb0ludCh0aGlzLl9sb2dMZXZlbCkgPj0gTG9nZ2VyU3RyYXRlZ3lDb25zb2xlLkxvZ0xldmVsVG9JbnQoY3VycmVudExldmVsKVxuXHR9XG5cblx0cHJvdGVjdGVkIF9sb2dNZXNzYWdlKHR5cGU6IExvZ0xldmVsLCAuLi5tc2dzOiB1bmtub3duW10pOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMuX3Nob3VsZExvZyh0eXBlKSkge1xuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHRcdHRoaXMuX2NvbnNvbGVMb2dTdHJhdGVneS5sb2coeyBtZXRhOiB0aGlzLl9tZXRhLCBwcmVmaXg6IHRoaXMuX21lc3NhZ2VQcmVmaXgsIHR5cGUgfSwgLi4ubXNncylcblx0fVxuXG5cdGRlYnVnKC4uLm1zZ3M6IHVua25vd25bXSk6IHZvaWQge1xuXHRcdHRoaXMuX2xvZ01lc3NhZ2UoTG9nTGV2ZWwuREVCVUcsIC4uLm1zZ3MpXG5cdH1cblxuXHRpbmZvKC4uLm1zZ3M6IHVua25vd25bXSk6IHZvaWQge1xuXHRcdHRoaXMuX2xvZ01lc3NhZ2UoTG9nTGV2ZWwuSU5GTywgLi4ubXNncylcblx0fVxuXG5cdHdhcm4oLi4ubXNnczogdW5rbm93bltdKTogdm9pZCB7XG5cdFx0dGhpcy5fbG9nTWVzc2FnZShMb2dMZXZlbC5XQVJOLCAuLi5tc2dzKVxuXHR9XG5cblx0ZXJyb3IoLi4ubXNnczogdW5rbm93bltdKTogdm9pZCB7XG5cdFx0dGhpcy5fbG9nTWVzc2FnZShMb2dMZXZlbC5FUlJPUiwgLi4ubXNncylcblx0fVxufVxuIl19