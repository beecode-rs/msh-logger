import { typeUtil } from '@beecode/msh-util/type-util';
import { LogLevel } from '../log-level.js';
import { ConsoleLogStrategySimple } from '../logger-strategy/console/log-strategy/simple.js';
export class LoggerStrategyConsole {
    _logLevel;
    _consoleLogStrategy;
    _messagePrefix;
    _meta;
    constructor(params) {
        const { logLevel = LogLevel.ERROR, consoleLogStrategy = new ConsoleLogStrategySimple(), messagePrefix, meta } = params ?? {};
        this._logLevel = logLevel;
        this._consoleLogStrategy = consoleLogStrategy;
        this._messagePrefix = messagePrefix;
        this._meta = meta;
    }
    clone(params) {
        const { meta, messagePrefix, logLevel } = params ?? {};
        return new LoggerStrategyConsole({
            logLevel: logLevel ?? this._logLevel,
            messagePrefix: messagePrefix ?? this._messagePrefix,
            meta: (this._meta || meta) && { ...this._meta, ...meta },
        });
    }
    static LogLevelToInt(logLevel) {
        switch (logLevel) {
            case LogLevel.ERROR:
                return 0;
            case LogLevel.WARN:
                return 1;
            case LogLevel.INFO:
                return 2;
            case LogLevel.DEBUG:
                return 3;
            default:
                throw typeUtil.exhaustiveError(`Unknown log lever [${logLevel}]`, logLevel);
        }
    }
    _shouldLog(currentLevel) {
        return LoggerStrategyConsole.LogLevelToInt(this._logLevel) >= LoggerStrategyConsole.LogLevelToInt(currentLevel);
    }
    _logMessage(type, ...msgs) {
        if (!this._shouldLog(type)) {
            return;
        }
        this._consoleLogStrategy.log({ meta: this._meta, prefix: this._messagePrefix, type }, ...msgs);
    }
    debug(...msgs) {
        this._logMessage(LogLevel.DEBUG, ...msgs);
    }
    info(...msgs) {
        this._logMessage(LogLevel.INFO, ...msgs);
    }
    warn(...msgs) {
        this._logMessage(LogLevel.WARN, ...msgs);
    }
    error(...msgs) {
        this._logMessage(LogLevel.ERROR, ...msgs);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc29sZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXItc3RyYXRlZ3kvY29uc29sZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFFdEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBR3pDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFBO0FBTTNGLE1BQU0sT0FBTyxxQkFBcUI7SUFDZCxTQUFTLENBQVU7SUFDbkIsbUJBQW1CLENBQW9CO0lBQ3ZDLGNBQWMsQ0FBUztJQUN2QixLQUFLLENBQWE7SUFFckMsWUFBWSxNQUE0QjtRQUN2QyxNQUFNLEVBQUUsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFBO1FBRTVILElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQTtRQUM3QyxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQTtRQUNuQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtJQUNsQixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQTZCO1FBQ2xDLE1BQU0sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUE7UUFFdEQsT0FBTyxJQUFJLHFCQUFxQixDQUFDO1lBQ2hDLFFBQVEsRUFBRSxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDcEMsYUFBYSxFQUFFLGFBQWEsSUFBSSxJQUFJLENBQUMsY0FBYztZQUNuRCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxFQUFFO1NBQ3hELENBQUMsQ0FBQTtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsYUFBYSxDQUFDLFFBQWtCO1FBQ3RDLFFBQVEsUUFBUSxFQUFFLENBQUM7WUFDbEIsS0FBSyxRQUFRLENBQUMsS0FBSztnQkFDbEIsT0FBTyxDQUFDLENBQUE7WUFDVCxLQUFLLFFBQVEsQ0FBQyxJQUFJO2dCQUNqQixPQUFPLENBQUMsQ0FBQTtZQUNULEtBQUssUUFBUSxDQUFDLElBQUk7Z0JBQ2pCLE9BQU8sQ0FBQyxDQUFBO1lBQ1QsS0FBSyxRQUFRLENBQUMsS0FBSztnQkFDbEIsT0FBTyxDQUFDLENBQUE7WUFDVDtnQkFDQyxNQUFNLFFBQVEsQ0FBQyxlQUFlLENBQUMsc0JBQXNCLFFBQVEsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQzdFLENBQUM7SUFDRixDQUFDO0lBRVMsVUFBVSxDQUFDLFlBQXNCO1FBQzFDLE9BQU8scUJBQXFCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDaEgsQ0FBQztJQUVTLFdBQVcsQ0FBQyxJQUFjLEVBQUUsR0FBRyxJQUFlO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDNUIsT0FBTTtRQUNQLENBQUM7UUFDRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUMvRixDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQUcsSUFBZTtRQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0lBRUQsSUFBSSxDQUFDLEdBQUcsSUFBZTtRQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0lBRUQsSUFBSSxDQUFDLEdBQUcsSUFBZTtRQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQUcsSUFBZTtRQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlVXRpbCB9IGZyb20gJ0BiZWVjb2RlL21zaC11dGlsL3R5cGUtdXRpbCdcblxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICcjc3JjL2xvZy1sZXZlbCdcbmltcG9ydCB7IExvZ2dlclN0cmF0ZWd5LCBMb2dnZXJTdHJhdGVneVBhcmFtcywgT2JqZWN0VHlwZSB9IGZyb20gJyNzcmMvbG9nZ2VyLXN0cmF0ZWd5J1xuaW1wb3J0IHsgQ29uc29sZUxvZ1N0cmF0ZWd5IH0gZnJvbSAnI3NyYy9sb2dnZXItc3RyYXRlZ3kvY29uc29sZS9sb2ctc3RyYXRlZ3knXG5pbXBvcnQgeyBDb25zb2xlTG9nU3RyYXRlZ3lTaW1wbGUgfSBmcm9tICcjc3JjL2xvZ2dlci1zdHJhdGVneS9jb25zb2xlL2xvZy1zdHJhdGVneS9zaW1wbGUnXG5cbmV4cG9ydCB0eXBlIENvbnNvbGVMb2dnZXJQYXJhbXMgPSB7XG5cdGNvbnNvbGVMb2dTdHJhdGVneT86IENvbnNvbGVMb2dTdHJhdGVneVxufSAmIExvZ2dlclN0cmF0ZWd5UGFyYW1zXG5cbmV4cG9ydCBjbGFzcyBMb2dnZXJTdHJhdGVneUNvbnNvbGUgaW1wbGVtZW50cyBMb2dnZXJTdHJhdGVneSB7XG5cdHByb3RlY3RlZCByZWFkb25seSBfbG9nTGV2ZWw6IExvZ0xldmVsXG5cdHByb3RlY3RlZCByZWFkb25seSBfY29uc29sZUxvZ1N0cmF0ZWd5OiBDb25zb2xlTG9nU3RyYXRlZ3lcblx0cHJvdGVjdGVkIHJlYWRvbmx5IF9tZXNzYWdlUHJlZml4Pzogc3RyaW5nXG5cdHByb3RlY3RlZCByZWFkb25seSBfbWV0YT86IE9iamVjdFR5cGVcblxuXHRjb25zdHJ1Y3RvcihwYXJhbXM/OiBDb25zb2xlTG9nZ2VyUGFyYW1zKSB7XG5cdFx0Y29uc3QgeyBsb2dMZXZlbCA9IExvZ0xldmVsLkVSUk9SLCBjb25zb2xlTG9nU3RyYXRlZ3kgPSBuZXcgQ29uc29sZUxvZ1N0cmF0ZWd5U2ltcGxlKCksIG1lc3NhZ2VQcmVmaXgsIG1ldGEgfSA9IHBhcmFtcyA/PyB7fVxuXG5cdFx0dGhpcy5fbG9nTGV2ZWwgPSBsb2dMZXZlbFxuXHRcdHRoaXMuX2NvbnNvbGVMb2dTdHJhdGVneSA9IGNvbnNvbGVMb2dTdHJhdGVneVxuXHRcdHRoaXMuX21lc3NhZ2VQcmVmaXggPSBtZXNzYWdlUHJlZml4XG5cdFx0dGhpcy5fbWV0YSA9IG1ldGFcblx0fVxuXG5cdGNsb25lKHBhcmFtcz86IExvZ2dlclN0cmF0ZWd5UGFyYW1zKTogTG9nZ2VyU3RyYXRlZ3lDb25zb2xlIHtcblx0XHRjb25zdCB7IG1ldGEsIG1lc3NhZ2VQcmVmaXgsIGxvZ0xldmVsIH0gPSBwYXJhbXMgPz8ge31cblxuXHRcdHJldHVybiBuZXcgTG9nZ2VyU3RyYXRlZ3lDb25zb2xlKHtcblx0XHRcdGxvZ0xldmVsOiBsb2dMZXZlbCA/PyB0aGlzLl9sb2dMZXZlbCxcblx0XHRcdG1lc3NhZ2VQcmVmaXg6IG1lc3NhZ2VQcmVmaXggPz8gdGhpcy5fbWVzc2FnZVByZWZpeCxcblx0XHRcdG1ldGE6ICh0aGlzLl9tZXRhIHx8IG1ldGEpICYmIHsgLi4udGhpcy5fbWV0YSwgLi4ubWV0YSB9LFxuXHRcdH0pXG5cdH1cblxuXHRzdGF0aWMgTG9nTGV2ZWxUb0ludChsb2dMZXZlbDogTG9nTGV2ZWwpOiBudW1iZXIge1xuXHRcdHN3aXRjaCAobG9nTGV2ZWwpIHtcblx0XHRcdGNhc2UgTG9nTGV2ZWwuRVJST1I6XG5cdFx0XHRcdHJldHVybiAwXG5cdFx0XHRjYXNlIExvZ0xldmVsLldBUk46XG5cdFx0XHRcdHJldHVybiAxXG5cdFx0XHRjYXNlIExvZ0xldmVsLklORk86XG5cdFx0XHRcdHJldHVybiAyXG5cdFx0XHRjYXNlIExvZ0xldmVsLkRFQlVHOlxuXHRcdFx0XHRyZXR1cm4gM1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhyb3cgdHlwZVV0aWwuZXhoYXVzdGl2ZUVycm9yKGBVbmtub3duIGxvZyBsZXZlciBbJHtsb2dMZXZlbH1dYCwgbG9nTGV2ZWwpXG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIF9zaG91bGRMb2coY3VycmVudExldmVsOiBMb2dMZXZlbCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBMb2dnZXJTdHJhdGVneUNvbnNvbGUuTG9nTGV2ZWxUb0ludCh0aGlzLl9sb2dMZXZlbCkgPj0gTG9nZ2VyU3RyYXRlZ3lDb25zb2xlLkxvZ0xldmVsVG9JbnQoY3VycmVudExldmVsKVxuXHR9XG5cblx0cHJvdGVjdGVkIF9sb2dNZXNzYWdlKHR5cGU6IExvZ0xldmVsLCAuLi5tc2dzOiB1bmtub3duW10pOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMuX3Nob3VsZExvZyh0eXBlKSkge1xuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHRcdHRoaXMuX2NvbnNvbGVMb2dTdHJhdGVneS5sb2coeyBtZXRhOiB0aGlzLl9tZXRhLCBwcmVmaXg6IHRoaXMuX21lc3NhZ2VQcmVmaXgsIHR5cGUgfSwgLi4ubXNncylcblx0fVxuXG5cdGRlYnVnKC4uLm1zZ3M6IHVua25vd25bXSk6IHZvaWQge1xuXHRcdHRoaXMuX2xvZ01lc3NhZ2UoTG9nTGV2ZWwuREVCVUcsIC4uLm1zZ3MpXG5cdH1cblxuXHRpbmZvKC4uLm1zZ3M6IHVua25vd25bXSk6IHZvaWQge1xuXHRcdHRoaXMuX2xvZ01lc3NhZ2UoTG9nTGV2ZWwuSU5GTywgLi4ubXNncylcblx0fVxuXG5cdHdhcm4oLi4ubXNnczogdW5rbm93bltdKTogdm9pZCB7XG5cdFx0dGhpcy5fbG9nTWVzc2FnZShMb2dMZXZlbC5XQVJOLCAuLi5tc2dzKVxuXHR9XG5cblx0ZXJyb3IoLi4ubXNnczogdW5rbm93bltdKTogdm9pZCB7XG5cdFx0dGhpcy5fbG9nTWVzc2FnZShMb2dMZXZlbC5FUlJPUiwgLi4ubXNncylcblx0fVxufVxuIl19