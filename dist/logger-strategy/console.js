import { typeUtil } from '@beecode/msh-util/type-util';
import { LogLevel } from '#src/log-level';
import { ConsoleLogStrategySimple } from '#src/logger-strategy/console/log-strategy/simple';
export class LoggerStrategyConsole {
    _logLevel;
    _consoleLogStrategy;
    _messagePrefix;
    _meta;
    constructor(params) {
        const { logLevel = LogLevel.ERROR, consoleLogStrategy = new ConsoleLogStrategySimple(), messagePrefix, meta } = params ?? {};
        this._logLevel = logLevel;
        this._consoleLogStrategy = consoleLogStrategy;
        this._messagePrefix = messagePrefix;
        this._meta = meta;
    }
    clone(params) {
        const { meta, messagePrefix, logLevel } = params ?? {};
        return new LoggerStrategyConsole({
            logLevel: logLevel ?? this._logLevel,
            messagePrefix: messagePrefix ?? this._messagePrefix,
            meta: (this._meta || meta) && { ...this._meta, ...meta },
        });
    }
    static LogLevelToInt(logLevel) {
        switch (logLevel) {
            case LogLevel.ERROR:
                return 0;
            case LogLevel.WARN:
                return 1;
            case LogLevel.INFO:
                return 2;
            case LogLevel.DEBUG:
                return 3;
            default:
                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                throw typeUtil.exhaustiveError(`Unknown log lever [${logLevel}]`, logLevel);
        }
    }
    _shouldLog(currentLevel) {
        return LoggerStrategyConsole.LogLevelToInt(this._logLevel) >= LoggerStrategyConsole.LogLevelToInt(currentLevel);
    }
    _logMessage(type, ...msgs) {
        if (!this._shouldLog(type)) {
            return;
        }
        this._consoleLogStrategy.log({ meta: this._meta, prefix: this._messagePrefix, type }, ...msgs);
    }
    debug(...msgs) {
        this._logMessage(LogLevel.DEBUG, ...msgs);
    }
    info(...msgs) {
        this._logMessage(LogLevel.INFO, ...msgs);
    }
    warn(...msgs) {
        this._logMessage(LogLevel.WARN, ...msgs);
    }
    error(...msgs) {
        this._logMessage(LogLevel.ERROR, ...msgs);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc29sZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXItc3RyYXRlZ3kvY29uc29sZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFFdEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBR3pDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFBO0FBTTNGLE1BQU0sT0FBTyxxQkFBcUI7SUFDZCxTQUFTLENBQVU7SUFDbkIsbUJBQW1CLENBQW9CO0lBQ3ZDLGNBQWMsQ0FBUztJQUN2QixLQUFLLENBQWE7SUFFckMsWUFBWSxNQUE0QjtRQUN2QyxNQUFNLEVBQUUsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFBO1FBRTVILElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQTtRQUM3QyxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQTtRQUNuQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtJQUNsQixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQTZCO1FBQ2xDLE1BQU0sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUE7UUFFdEQsT0FBTyxJQUFJLHFCQUFxQixDQUFDO1lBQ2hDLFFBQVEsRUFBRSxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDcEMsYUFBYSxFQUFFLGFBQWEsSUFBSSxJQUFJLENBQUMsY0FBYztZQUNuRCxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxFQUFFO1NBQ3hELENBQUMsQ0FBQTtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsYUFBYSxDQUFDLFFBQWtCO1FBQ3RDLFFBQVEsUUFBUSxFQUFFLENBQUM7WUFDbEIsS0FBSyxRQUFRLENBQUMsS0FBSztnQkFDbEIsT0FBTyxDQUFDLENBQUE7WUFDVCxLQUFLLFFBQVEsQ0FBQyxJQUFJO2dCQUNqQixPQUFPLENBQUMsQ0FBQTtZQUNULEtBQUssUUFBUSxDQUFDLElBQUk7Z0JBQ2pCLE9BQU8sQ0FBQyxDQUFBO1lBQ1QsS0FBSyxRQUFRLENBQUMsS0FBSztnQkFDbEIsT0FBTyxDQUFDLENBQUE7WUFDVDtnQkFDQyw0RUFBNEU7Z0JBQzVFLE1BQU0sUUFBUSxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsUUFBUSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDN0UsQ0FBQztJQUNGLENBQUM7SUFFUyxVQUFVLENBQUMsWUFBc0I7UUFDMUMsT0FBTyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNoSCxDQUFDO0lBRVMsV0FBVyxDQUFDLElBQWMsRUFBRSxHQUFHLElBQWU7UUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUM1QixPQUFNO1FBQ1AsQ0FBQztRQUNELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQy9GLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBRyxJQUFlO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQzFDLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBRyxJQUFlO1FBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQ3pDLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBRyxJQUFlO1FBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQ3pDLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBRyxJQUFlO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQzFDLENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHR5cGVVdGlsIH0gZnJvbSAnQGJlZWNvZGUvbXNoLXV0aWwvdHlwZS11dGlsJ1xuXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJyNzcmMvbG9nLWxldmVsJ1xuaW1wb3J0IHsgdHlwZSBMb2dnZXJTdHJhdGVneSwgdHlwZSBMb2dnZXJTdHJhdGVneVBhcmFtcywgdHlwZSBPYmplY3RUeXBlIH0gZnJvbSAnI3NyYy9sb2dnZXItc3RyYXRlZ3knXG5pbXBvcnQgeyB0eXBlIENvbnNvbGVMb2dTdHJhdGVneSB9IGZyb20gJyNzcmMvbG9nZ2VyLXN0cmF0ZWd5L2NvbnNvbGUvbG9nLXN0cmF0ZWd5J1xuaW1wb3J0IHsgQ29uc29sZUxvZ1N0cmF0ZWd5U2ltcGxlIH0gZnJvbSAnI3NyYy9sb2dnZXItc3RyYXRlZ3kvY29uc29sZS9sb2ctc3RyYXRlZ3kvc2ltcGxlJ1xuXG5leHBvcnQgdHlwZSBDb25zb2xlTG9nZ2VyUGFyYW1zID0ge1xuXHRjb25zb2xlTG9nU3RyYXRlZ3k/OiBDb25zb2xlTG9nU3RyYXRlZ3lcbn0gJiBMb2dnZXJTdHJhdGVneVBhcmFtc1xuXG5leHBvcnQgY2xhc3MgTG9nZ2VyU3RyYXRlZ3lDb25zb2xlIGltcGxlbWVudHMgTG9nZ2VyU3RyYXRlZ3kge1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX2xvZ0xldmVsOiBMb2dMZXZlbFxuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX2NvbnNvbGVMb2dTdHJhdGVneTogQ29uc29sZUxvZ1N0cmF0ZWd5XG5cdHByb3RlY3RlZCByZWFkb25seSBfbWVzc2FnZVByZWZpeD86IHN0cmluZ1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX21ldGE/OiBPYmplY3RUeXBlXG5cblx0Y29uc3RydWN0b3IocGFyYW1zPzogQ29uc29sZUxvZ2dlclBhcmFtcykge1xuXHRcdGNvbnN0IHsgbG9nTGV2ZWwgPSBMb2dMZXZlbC5FUlJPUiwgY29uc29sZUxvZ1N0cmF0ZWd5ID0gbmV3IENvbnNvbGVMb2dTdHJhdGVneVNpbXBsZSgpLCBtZXNzYWdlUHJlZml4LCBtZXRhIH0gPSBwYXJhbXMgPz8ge31cblxuXHRcdHRoaXMuX2xvZ0xldmVsID0gbG9nTGV2ZWxcblx0XHR0aGlzLl9jb25zb2xlTG9nU3RyYXRlZ3kgPSBjb25zb2xlTG9nU3RyYXRlZ3lcblx0XHR0aGlzLl9tZXNzYWdlUHJlZml4ID0gbWVzc2FnZVByZWZpeFxuXHRcdHRoaXMuX21ldGEgPSBtZXRhXG5cdH1cblxuXHRjbG9uZShwYXJhbXM/OiBMb2dnZXJTdHJhdGVneVBhcmFtcyk6IExvZ2dlclN0cmF0ZWd5Q29uc29sZSB7XG5cdFx0Y29uc3QgeyBtZXRhLCBtZXNzYWdlUHJlZml4LCBsb2dMZXZlbCB9ID0gcGFyYW1zID8/IHt9XG5cblx0XHRyZXR1cm4gbmV3IExvZ2dlclN0cmF0ZWd5Q29uc29sZSh7XG5cdFx0XHRsb2dMZXZlbDogbG9nTGV2ZWwgPz8gdGhpcy5fbG9nTGV2ZWwsXG5cdFx0XHRtZXNzYWdlUHJlZml4OiBtZXNzYWdlUHJlZml4ID8/IHRoaXMuX21lc3NhZ2VQcmVmaXgsXG5cdFx0XHRtZXRhOiAodGhpcy5fbWV0YSB8fCBtZXRhKSAmJiB7IC4uLnRoaXMuX21ldGEsIC4uLm1ldGEgfSxcblx0XHR9KVxuXHR9XG5cblx0c3RhdGljIExvZ0xldmVsVG9JbnQobG9nTGV2ZWw6IExvZ0xldmVsKTogbnVtYmVyIHtcblx0XHRzd2l0Y2ggKGxvZ0xldmVsKSB7XG5cdFx0XHRjYXNlIExvZ0xldmVsLkVSUk9SOlxuXHRcdFx0XHRyZXR1cm4gMFxuXHRcdFx0Y2FzZSBMb2dMZXZlbC5XQVJOOlxuXHRcdFx0XHRyZXR1cm4gMVxuXHRcdFx0Y2FzZSBMb2dMZXZlbC5JTkZPOlxuXHRcdFx0XHRyZXR1cm4gMlxuXHRcdFx0Y2FzZSBMb2dMZXZlbC5ERUJVRzpcblx0XHRcdFx0cmV0dXJuIDNcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVzdHJpY3QtdGVtcGxhdGUtZXhwcmVzc2lvbnNcblx0XHRcdFx0dGhyb3cgdHlwZVV0aWwuZXhoYXVzdGl2ZUVycm9yKGBVbmtub3duIGxvZyBsZXZlciBbJHtsb2dMZXZlbH1dYCwgbG9nTGV2ZWwpXG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIF9zaG91bGRMb2coY3VycmVudExldmVsOiBMb2dMZXZlbCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBMb2dnZXJTdHJhdGVneUNvbnNvbGUuTG9nTGV2ZWxUb0ludCh0aGlzLl9sb2dMZXZlbCkgPj0gTG9nZ2VyU3RyYXRlZ3lDb25zb2xlLkxvZ0xldmVsVG9JbnQoY3VycmVudExldmVsKVxuXHR9XG5cblx0cHJvdGVjdGVkIF9sb2dNZXNzYWdlKHR5cGU6IExvZ0xldmVsLCAuLi5tc2dzOiB1bmtub3duW10pOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMuX3Nob3VsZExvZyh0eXBlKSkge1xuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHRcdHRoaXMuX2NvbnNvbGVMb2dTdHJhdGVneS5sb2coeyBtZXRhOiB0aGlzLl9tZXRhLCBwcmVmaXg6IHRoaXMuX21lc3NhZ2VQcmVmaXgsIHR5cGUgfSwgLi4ubXNncylcblx0fVxuXG5cdGRlYnVnKC4uLm1zZ3M6IHVua25vd25bXSk6IHZvaWQge1xuXHRcdHRoaXMuX2xvZ01lc3NhZ2UoTG9nTGV2ZWwuREVCVUcsIC4uLm1zZ3MpXG5cdH1cblxuXHRpbmZvKC4uLm1zZ3M6IHVua25vd25bXSk6IHZvaWQge1xuXHRcdHRoaXMuX2xvZ01lc3NhZ2UoTG9nTGV2ZWwuSU5GTywgLi4ubXNncylcblx0fVxuXG5cdHdhcm4oLi4ubXNnczogdW5rbm93bltdKTogdm9pZCB7XG5cdFx0dGhpcy5fbG9nTWVzc2FnZShMb2dMZXZlbC5XQVJOLCAuLi5tc2dzKVxuXHR9XG5cblx0ZXJyb3IoLi4ubXNnczogdW5rbm93bltdKTogdm9pZCB7XG5cdFx0dGhpcy5fbG9nTWVzc2FnZShMb2dMZXZlbC5FUlJPUiwgLi4ubXNncylcblx0fVxufVxuIl19