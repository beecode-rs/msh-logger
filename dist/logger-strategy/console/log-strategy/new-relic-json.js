import { ObjectUtil } from '@beecode/msh-util/object-util';
export class ConsoleLogStrategyNewRelicJson {
    _objectUtil = new ObjectUtil();
    log(params, ...msgs) {
        const { type, meta, prefix, datetime = new Date() } = params;
        const messagePayloads = msgs.map((msg) => {
            return {
                ...meta,
                logtype: type.toString(),
                timestamp: datetime.getTime(),
                ...this._messagePayloadExtractorIfExists({ msg, prefix }),
            };
        });
        messagePayloads.forEach((payload) => {
            console.log(this._objectUtil.deepStringify(payload, { isSorted: true })); // eslint-disable-line no-console
        });
    }
    _messagePayloadExtractorIfExists(params) {
        const { msg, prefix } = params;
        if (!msg) {
            return { message: '' };
        }
        if (typeof msg === 'object') {
            const { message, ...restObjects } = msg;
            return { ...restObjects, message: this._joinDefined(prefix, message) };
        }
        if (typeof msg === 'string') {
            return { message: this._joinDefined(prefix, msg) };
        }
        return { message: '' };
    }
    _joinDefined(prefix, msg) {
        return [prefix, msg].filter(Boolean).join(' ');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3LXJlbGljLWpzb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbG9nZ2VyLXN0cmF0ZWd5L2NvbnNvbGUvbG9nLXN0cmF0ZWd5L25ldy1yZWxpYy1qc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQTtBQU0xRCxNQUFNLE9BQU8sOEJBQThCO0lBQ2hDLFdBQVcsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFBO0lBRXhDLEdBQUcsQ0FBQyxNQUErRSxFQUFFLEdBQUcsSUFBZTtRQUN0RyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxHQUFHLElBQUksSUFBSSxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUE7UUFFNUQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ3hDLE9BQU87Z0JBQ04sR0FBRyxJQUFJO2dCQUNQLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUN4QixTQUFTLEVBQUUsUUFBUSxDQUFDLE9BQU8sRUFBRTtnQkFDN0IsR0FBRyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUM7YUFDekQsQ0FBQTtRQUNGLENBQUMsQ0FBQyxDQUFBO1FBQ0YsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQSxDQUFDLGlDQUFpQztRQUMzRyxDQUFDLENBQUMsQ0FBQTtJQUNILENBQUM7SUFFUyxnQ0FBZ0MsQ0FBQyxNQUF5QztRQUluRixNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUM5QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDVixPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFBO1FBQ3ZCLENBQUM7UUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQzdCLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxXQUFXLEVBQUUsR0FBRyxHQUFtRCxDQUFBO1lBRXZGLE9BQU8sRUFBRSxHQUFHLFdBQVcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQTtRQUN2RSxDQUFDO1FBRUQsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUM3QixPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUE7UUFDbkQsQ0FBQztRQUVELE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUE7SUFDdkIsQ0FBQztJQUVTLFlBQVksQ0FBQyxNQUFlLEVBQUUsR0FBWTtRQUNuRCxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDL0MsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JqZWN0VXRpbCB9IGZyb20gJ0BiZWVjb2RlL21zaC11dGlsL29iamVjdC11dGlsJ1xuXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJyNzcmMvbG9nLWxldmVsJ1xuaW1wb3J0IHsgT2JqZWN0VHlwZSB9IGZyb20gJyNzcmMvbG9nZ2VyLXN0cmF0ZWd5J1xuaW1wb3J0IHsgQ29uc29sZUxvZ1N0cmF0ZWd5IH0gZnJvbSAnI3NyYy9sb2dnZXItc3RyYXRlZ3kvY29uc29sZS9sb2ctc3RyYXRlZ3knXG5cbmV4cG9ydCBjbGFzcyBDb25zb2xlTG9nU3RyYXRlZ3lOZXdSZWxpY0pzb24gaW1wbGVtZW50cyBDb25zb2xlTG9nU3RyYXRlZ3kge1xuXHRwcm90ZWN0ZWQgX29iamVjdFV0aWwgPSBuZXcgT2JqZWN0VXRpbCgpXG5cblx0bG9nKHBhcmFtczogeyB0eXBlOiBMb2dMZXZlbDsgbWV0YT86IE9iamVjdFR5cGU7IGRhdGV0aW1lPzogRGF0ZTsgcHJlZml4Pzogc3RyaW5nIH0sIC4uLm1zZ3M6IHVua25vd25bXSk6IHZvaWQge1xuXHRcdGNvbnN0IHsgdHlwZSwgbWV0YSwgcHJlZml4LCBkYXRldGltZSA9IG5ldyBEYXRlKCkgfSA9IHBhcmFtc1xuXG5cdFx0Y29uc3QgbWVzc2FnZVBheWxvYWRzID0gbXNncy5tYXAoKG1zZykgPT4ge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Li4ubWV0YSxcblx0XHRcdFx0bG9ndHlwZTogdHlwZS50b1N0cmluZygpLFxuXHRcdFx0XHR0aW1lc3RhbXA6IGRhdGV0aW1lLmdldFRpbWUoKSxcblx0XHRcdFx0Li4udGhpcy5fbWVzc2FnZVBheWxvYWRFeHRyYWN0b3JJZkV4aXN0cyh7IG1zZywgcHJlZml4IH0pLFxuXHRcdFx0fVxuXHRcdH0pXG5cdFx0bWVzc2FnZVBheWxvYWRzLmZvckVhY2goKHBheWxvYWQpID0+IHtcblx0XHRcdGNvbnNvbGUubG9nKHRoaXMuX29iamVjdFV0aWwuZGVlcFN0cmluZ2lmeShwYXlsb2FkLCB7IGlzU29ydGVkOiB0cnVlIH0pKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcblx0XHR9KVxuXHR9XG5cblx0cHJvdGVjdGVkIF9tZXNzYWdlUGF5bG9hZEV4dHJhY3RvcklmRXhpc3RzKHBhcmFtczogeyBtc2c6IHVua25vd247IHByZWZpeD86IHN0cmluZyB9KToge1xuXHRcdG1lc3NhZ2U6IHN0cmluZ1xuXHRcdFtrZXk6IHN0cmluZ106IHVua25vd25cblx0fSB7XG5cdFx0Y29uc3QgeyBtc2csIHByZWZpeCB9ID0gcGFyYW1zXG5cdFx0aWYgKCFtc2cpIHtcblx0XHRcdHJldHVybiB7IG1lc3NhZ2U6ICcnIH1cblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIG1zZyA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGNvbnN0IHsgbWVzc2FnZSwgLi4ucmVzdE9iamVjdHMgfSA9IG1zZyBhcyB7IG1lc3NhZ2U/OiBzdHJpbmc7IFtrZXk6IHN0cmluZ106IHVua25vd24gfVxuXG5cdFx0XHRyZXR1cm4geyAuLi5yZXN0T2JqZWN0cywgbWVzc2FnZTogdGhpcy5fam9pbkRlZmluZWQocHJlZml4LCBtZXNzYWdlKSB9XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4geyBtZXNzYWdlOiB0aGlzLl9qb2luRGVmaW5lZChwcmVmaXgsIG1zZykgfVxuXHRcdH1cblxuXHRcdHJldHVybiB7IG1lc3NhZ2U6ICcnIH1cblx0fVxuXG5cdHByb3RlY3RlZCBfam9pbkRlZmluZWQocHJlZml4Pzogc3RyaW5nLCBtc2c/OiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdHJldHVybiBbcHJlZml4LCBtc2ddLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJylcblx0fVxufVxuIl19